'''
Problem 9 Description:
The four adjacent digits in the 1000-digit number that have the greatest product are
9 * 9 * 8 * 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
What is the value of this product?
'''

#Easier to just put this here as a big string of numbers.
STRING_OF_NUMBERS = '''73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450'''



def find_largest_product_in_series():
    '''Prints out the largest possible product from 13 digits in series'''
    list_of_numbers = []

    #Fill all numbers from String into a list of individual digits.
    for i in range(0, len(STRING_OF_NUMBERS)):
        #Make sure to get rid of carriage returns.
        if STRING_OF_NUMBERS[i] != "\n" and STRING_OF_NUMBERS[i] != "\r":
            list_of_numbers.append(int(STRING_OF_NUMBERS[i]))

    #Start with max product as 1
    max_product = 1
    for i in range(0, len(list_of_numbers)-12):
        #reset product to 1 each time
        product = 1
        #Get digits one to 13 and multiple
        for j in range(0, 13):
            #A check in here to make sure that none of the elements in here are 0 would save time
            #Would stop it working in every case though.
            product = product * list_of_numbers[i+j]
        #update max product if current product is greater
        if product > max_product:
            max_product = product

    print max_product

find_largest_product_in_series()


# I feel like this could have been improved by only going through the whole list once and
# while keeping 13 digits all the time, divide by the first digit and multiple by the new
# digit. Difficult to account for zeroes though.
